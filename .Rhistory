print("hello world")
citation()
4+5
5-4
10*2
10/2
install.packages("RMySQL")
install.packages("Rtools")
install.packages("Rtools")
R -version
help
help()
r.version
R.version
library(dplyr)
library(stats)
str(result)
# Connect to MySQL database
mysqlconnection = dbConnect(RMySQL::MySQL(),
dbname='weather_montreal',
host='localhost',
port=3306,
user='working',
password='Working$')
# displays the tables available in this database.
dbListTables(mysqlconnection)
result <- dbSendQuery(mysqlconnection, "select * from weather_daily")
str(result)
weather_daily <- fetch(result, n=-1)
str(weather_daily)
summarize(weather_daily)
str(weather_daily)
glimpse(weather_daily)
# Different ways to look at the data
str(weather_daily)
mean_temp <- weather_daily$Mean_Temp_C
mean(mean_temp)
mean(mean_temp, na.rm = TRUE)
sd(mean_temp, na.rm = TRUE)
var(mean_temp)
var(mean_temp, na.rm = TRUE)
quantile(mean_temp, na.rm = TRUE)
result <- dbSendQuery(mysqlconnection, "select * from weather_daily where mean_temp > -50")
weather_daily <- fetch(result, n=-1)
result <- dbSendQuery(mysqlconnection, "select * from weather_daily where mean_temp > -50")
result <- dbSendQuery(mysqlconnection, "select * from weather_daily where Mean_Temp_C > -50")
weather_daily <- fetch(result, n=-1)
weather_daily <- fetch(result, n=-1)
result <- dbSendQuery(mysqlconnection, "select * from weather_daily where Mean_Temp_C > -50")
weather_daily <- fetch(result, n=-1)
# Different ways to look at the data
str(weather_daily)
summary(weather_daily)
snow <- dbSendQuery(mysqlconnection, "select Month, max(Total_Snow_cm) from weather_daily group by Month")
result_snow <- dbSendQuery(mysqlconnection, "select Month, max(Total_Snow_cm) from weather_daily group by Month")
snow <- fetch(result, n=-1)
result_snow <- dbSendQuery(mysqlconnection, "select Month, max(Total_Snow_cm) from weather_daily group by Month")
snow <- fetch(result_snow, n=-1)
snow_avg <- fetch(result, n=-1)
result_snow <- dbSendQuery(mysqlconnection, "select Month, max(Total_Snow_cm) from weather_daily group by Month")
snow_avg <- fetch(snow, n=-1)
print(snow_avg)
result_snow <- dbSendQuery(mysqlconnection, "select Date, Month, max(Total_Snow_cm) from weather_daily group by Month")
result_snow <- dbSendQuery(mysqlconnection, "select Year, Month, Day, max(Total_Snow_cm) from weather_daily group by Year, Month, Day")
snow_avg <- fetch(result_snow, n=-1)
print(snow_avg)
result_snow <- dbSendQuery(mysqlconnection, "select Year, Month, max(Total_Snow_cm) from weather_daily group by Year, Month")
result_snow <- dbSendQuery(mysqlconnection, "select Year, Month, max(Total_Snow_cm) from weather_daily group by Year, Month")
snow_avg <- fetch(result_snow, n=-1)
print(snow_avg)
result_snow <- dbSendQuery(mysqlconnection, "select Date, Month, Total_Snow_cm from weather_daily group by Year, Month order by Total_Snow_cm limit 100")
result_snow <- dbSendQuery(mysqlconnection, "select Date, Month, Total_Snow_cm from weather_daily order by Total_Snow_cm limit 100")
result_snow <- dbSendQuery(mysqlconnection, "select Date, Month, Total_Snow_cm from weather_daily order by Total_Snow_cm DESC limit 100")
snow_avg <- fetch(result_snow, n=-1)
result_snow <- dbSendQuery(mysqlconnection, "select Date, Month, Total_Snow_cm from weather_daily order by Total_Snow_cm DESC limit 100")
snow_avg <- fetch(result_snow, n=-1)
print(snow_avg)
library(tidyverse, ggplot2, skimr, lubridate)
# Shortcut
install.packages(c("tidyverse", "ggplot2", "skimr", "lubridate"))
library(tidyverse, ggplot2, skimr, lubridate)
library(c(tidyverse, ggplot2, skimr, lubridate))
library(tidyverse)
library(ggplot2)
library(skimr)
library(lubridate)
# Flexibly restructure and aggregate data using just two functions:
# melt and 'dcast' (or 'acast').
# ------------------------------
install.packages("reshape2")
library(reshape2)
# Harrell Miscellaneous
install.packages("Hmisc")
library(Hmisc)
# Scales
install.packages("scales")
install.packages("scales")
library(scales)
# Connect to MySQL database
mysqlconnection = dbConnect(RMySQL::MySQL(),
dbname='montreal_velo',
host='localhost',
port=3306,
user='working',
password='Working$')
# displays the tables available in this database.
dbListTables(mysqlconnection)
# Retrieve data from different tables in Database
# -----------------------------------------------
# VELO_COMPLETE
result <- dbSendQuery(mysqlconnection, "select * from velo_complete")
bike_usage <- fetch(result, n=-1)
# BICYCLE_COUNTER_NAMES
result <- dbSendQuery(mysqlconnection, "select * from bicycle_counter_names")
bike_counters <- fetch(result, n=-1)
# Select columns from one dataframe, and store it in another
counter_names <- bike_counters %>% select(ID, Nom)
# Select columns from one dataframe, and store it in another
counter_names <- bike_counters %>% select(ID, Nom)
str(bike_counters)
# Select columns from one dataframe, and store it in another
counter_names <- bike_counters %>% select(Data_Code, Name)
# Convert the datetime strings to POSIXct objects
bike_usage_names$Datetime <- strptime(
bike_usage$Date, format = "%Y-%m-%d %H:%M:%S")
bike_usage_names <- bike_usage %>% rename_at(vars(
compteur_100003034, compteur_100003039, compteur_100057500,
compteur_100004575, compteur_100003032, compteur_100003040,
compteur_100003041, compteur_100003042, compteur_100002880,
compteur_100007390, compteur_100011747, compteur_100011748,
compteur_100011783, compteur_100012217, compteur_100012218,
compteur_100017441, compteur_100001753, compteur_100047030,
compteur_100017523, compteur_38, compteur_39,
compteur_100025474, compteur_100034805, compteur_100035408,
compteur_100035409, compteur_100041101, compteur_100041114,
compteur_100052600, compteur_100052601, compteur_100052602,
compteur_100052603, compteur_100052604, compteur_100052605,
compteur_100052606, compteur_100053055, compteur_100053057,
compteur_100053058, compteur_100053059, compteur_100053210,
compteur_100054073, compteur_100056188, compteur_100057050,
compteur_100057051, compteur_100057052, compteur_100057053,
compteur_100053209, compteur_100054585, compteur_100055268,
compteur_100054241, compteur_300014993, compteur_300014986,
compteur_300014985, compteur_300014995, compteur_300014996,
compteur_300014916, compteur_300014994, compteur_300020478
),
list(~bike_counters$Name[match(., bike_counters$Data_Code)]))
# Convert the datetime strings to POSIXct objects
bike_usage_names$Datetime <- strptime(
bike_usage$Date, format = "%Y-%m-%d %H:%M:%S")
# Split the datetime column into separate year, month, day, and time columns
bike_usage_names$year <- year(bike_usage_names$Datetime)
bike_usage_names$month <- month(bike_usage_names$Datetime)
# create a copy of the bike_usage_names dataframe
velo_db <- bike_usage_names
# Transform all char columns to int
velo_db <- column_to_int(velo_db, c(3:62))
# Store velo_db in MySQL to make it easier to retrieve checkpoint
dbWriteTable(mysqlconnection, "velo_database", velo_db, overwrite = TRUE)
# Connect to MySQL database
mysqlconnection = dbConnect(RMySQL::MySQL(),
dbname='montreal_velo',
host='localhost',
port=3306,
user='working',
password='Working$',
local_infile = 1)
# Store velo_db in MySQL to make it easier to retrieve checkpoint
dbWriteTable(mysqlconnection, "velo_database", velo_db, overwrite = TRUE)
# Store velo_db in MySQL to make it easier to retrieve checkpoint
dbWriteTable(mysqlconnection, "velo_database", velo_db, overwrite = TRUE)
# Store velo_db in MySQL to make it easier to retrieve checkpoint
dbWriteTable(mysqlconnection, "velo_database", velo_db, overwrite = TRUE)
# working_dir <- "C:/Users/Raf/Desktop/Data/Projects/Montreal Case Study"
working_dir <-
"C:/Users/Raf/Desktop/Data/Projects/Montreal Case Study/GitHub/mtl_velo"
# Set working directory at the beginning of a session
setwd(working_dir)
library(esquisse)
install.packages("esquisse")
library(esquisse)
# ------------------------------------------------------------------------------
#                                FUNCTIONS
# ------------------------------------------------------------------------------
load_data_from_db <- function(db_name, db_table) {
# Load the required packages
library(DBI)
library(RMySQL)
# Connect to MySQL database
mysqlconnection = dbConnect(RMySQL::MySQL(),
dbname=db_name,
host='localhost',
port=3306,
user='working',
password='Working$',
local_infile = 1)
# Select * From db_table
result <- dbSendQuery(mysqlconnection, paste0("select * from ", db_table))
# Return the fetch result
fetch(result, n=-1)
}
#                                                                 COLUMNS TO INT
# ------------------------------------------------------------------------------
column_to_int <- function(data, range) {
# Get the names of the columns in the dataframe
col_names <- names(data)
# Loop through the columns in the specified range
for (col in col_names[range]) {
# Check if the column has a char type
if (is.character(data[[col]])) {
# Convert the column to an integer type
data[[col]] <- as.integer(data[[col]])
}
}
# Return the transformed dataframe
return(data)
}
#                                                                 LOAD LIBRARIES
# ------------------------------------------------------------------------------
load_libraries <- function() {
# Shortcut
install.packages(c("tidyverse", "ggplot2", "skimr", "lubridate"))
library(tidyverse)
library(ggplot2)
library(skimr)
library(lubridate)
# Flexibly restructure and aggregate data using just two functions:
# melt and 'dcast' (or 'acast').
# ------------------------------
install.packages("reshape2")
library(reshape2)
# Harrell Miscellaneous
install.packages("Hmisc")
library(Hmisc)
# Scales
install.packages("scales")
library(scales)
# GitHub
# The following object is masked from ‘package:RMySQL’: -> fetch
# The following object is masked from ‘package:DBI’: -> fetch
install.packages("git2r")
library(git2r)
install.packages("gitcreds")
library(gitcreds)
install.packages("credentials")
library(credentials)
# install.packages("esquisse")
# library(esquisse)
}
#                                                                    DATE WINDOW
# ------------------------------------------------------------------------------
# Subset dataframe between two years
date_window <- function(data, start_date, end_date) {
# Create a subset between the two years
subset <- data[data$year >= start_date & data$year <= end_date,]
return(subset)
}
load_libraries()
install.packages(c("tidyverse", "ggplot2", "skimr", "lubridate"))
install.packages("scales")
install.packages(c("tidyverse", "ggplot2", "skimr", "lubridate"))
install.packages("scales")
# Run the functions script first
R < scriptName.R --no-save
ScriptFunctions_V1.R --no-save
R < ScriptFunctions_V1.R --no-save
# Run the functions script first
R < "ScriptFunctions_V1.R --no-save"
# Run the functions script first
"ScriptFunctions_V1.R --no-save"
runScript <- function(scriptName) {
source(scriptName)
}
# Run the functions script first
runScript("ScriptFunctions_V1.R")
# Run the functions script first
runScript(ScriptFunctions_V1.R)
# Run the functions script first
runScript(Script_Functions_V1.R)
# Run the functions script first
runScript('Script_Functions_V1.R')
View(load_libraries)
exportCSVout <- function(data, fileName) {
filePath <- file.path("..", "Exports", fileName)
write.csv(data, file = filePath, row.names = FALSE)
}
# Use this function to export out of repository
exportCSVout(velo_db, "velo_database.csv")
# Use this function to export out of repository
exportCSVout(velo_db, "velo_database.csv")
# Load data from database(montreal_velo) / table(velo_complete)
velo_db <- load_data_from_db("montreal_velo", "velo_database")
# Load data from database(montreal_velo) / table(velo_database)
velo_db <- load_data_from_db("montreal_velo", "velo_database")
View(load_libraries)
View(load_data_from_db)
# Load the required packages
library(DBI)
library(RMySQL)
# Connect to MySQL database
mysqlconnection = dbConnect(RMySQL::MySQL(),
dbname=db_name,
host='localhost',
port=3306,
user='working',
password='Working$',
local_infile = 1)
source("C:/Users/Raf/Desktop/Data/Projects/Montreal Case Study/GitHub/mtl_velo/Script_Functions_V1.R", echo=TRUE)
source("C:/Users/Raf/Desktop/Data/Projects/Montreal Case Study/GitHub/mtl_velo/Script_Functions_V1.R", echo=TRUE)
# Function testing
db_name <- "montreal_velo"
db_table <- "velo_database"
# Connect to MySQL database
mysqlconnection = dbConnect(RMySQL::MySQL(),
dbname=db_name,
host='localhost',
port=3306,
user='working',
password='Working$',
local_infile = 1)
# Select * From db_table
result <- dbSendQuery(mysqlconnection, paste0("select * from ", db_table))
# Return the fetch result
fetch(result, n=-1)
dbGetInfo(mysqlconnection)
# Select * From db_table
result <- dbSendQuery(mysqlconnection, paste0("select * from ", db_table))
# Return the fetch result
fetch(result, n=-1)
# Return the fetch result
fetch(result, n=10)
# Return the fetch result
fetch(result)
# Select * From db_table
result <- dbSendQuery(mysqlconnection, paste0("select * from ", db_table))
View(result)
# Return the fetch result
data <- fetch(result, n=-1)
